let talkRusty = "bark!"; /*Basic declaring a variable*/
let firstName,
    secondName,
    thridName; //this is called binding where I can bind variable names as known as a binding list

let firstName = "Rusty";
let lastName = "Sifuentez";
let fullName = firstName + ' ' + lastName;
console.log(fullName)

let rustyIsdog = "true"; 
rustyIsdog

let englishShip = 5;
let spanishShip =10;
let shipBattle = englishShip - spanishShip;


const constantObject = { "firstvalue" : true }; //const is the third variable 
constantObject.secondvalue = false;
const constantObject = { firstvalue :true, secondvalue: false } 

{
    let scopedVariable = false;
    {
    let scopedVariable = true;
    }
    console.log( scopedVariable );
}
> false
//this scoped block allows me to declare a variable but can only be accessed within inside the block. 
//Here I have initialized inside a descendant block without errors even if it uses the same  identifier as a variable in a parent block

let theWorld = "Global"; //This is a Global scope
function myFun(){
    theWorld = "Global"; //This is also a Global scope also sometimes known as a implied global 
    return theWorld 
}
